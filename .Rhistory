shiny::runApp()
runApp()
install.packages('devtools')
devtools::install_version("shinydashboardplus", version = "0.7.5", repos = "http://cran.us.r-project.org")
install_version("shinydashboardplus", version = "0.7.5", repos = "http://cran.us.r-project.org")
library(devtools)
install.packages('cli')
install.packages("cli")
install.packages("cli")
install.packages("cli")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
AppBodyUI <- shinydashboardPlus::dashboardBody(
# Scripts
shinyjs::useShinyjs(),
AppTheme,
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "style.css")
),
widgetUI
)
?shinyDashboardThemeDIY
AppPageList <- str_extract(list.files(paste0('src/pages/'), recursive = T), '[^.]+')
AppPagesUI <- function(id) {
ns <- NS(id)
PageUIList <- lapply(AppPageList, function(x) {
x <- str_extract(x, '([^/]+$)')
tabItem(tabName = str_to_lower(x), get(paste0(x, 'ModuleUI'))(ns(paste0(x, 'PageModule'))))
})
do.call(tabItems, compact(PageUIList))
}
AppPagesUI
AppPagesUI()
runApp('C:/Users/259699/Desktop/microplastics/shiny_dashboard_app')
runApp()
### Source the file to load the
# Import Libraries
#################################
library(R.utils)
library(plyr)
library(shiny)
library(shinyjs)
library(shinyWidgets)
library(shinydashboard)
library(shinydashboardPlus)
library(dashboardthemes)
library(shinyjqui)
library(DBI)
library(glue)
library(DT)
library(stringr)
library(readr)
library(tidyverse)
library(jsonlite)
library(dplyr)
library(tidyr)
#######################################################################
provided <- function(data, condition, call) {
if (rlang::eval_tidy(enquo(condition), data)) {
rlang::eval_tidy(rlang::quo_squash(quo(data %>% !!enquo(call))))
} else data
}
formatDTDisplay <- function(a, selectChoice = 'multiple', currencyCol = NULL, roundCol = NULL, roundDigit = 2, pagelen = 50, rownames = F) {
a %>% datatable(#extensions = 'Buttons',
selection = selectChoice, rownames = rownames, filter = 'top', escape = F,
options = list( pageLength = pagelen, scrollX = T, scrollY = "500px", dom = 'T<"clear">lBfrtip')
) %>%
provided(!is.null(currencyCol), formatCurrency(currencyCol, currency = "", interval = 3, mark = ",")) %>%
provided(!is.null(roundCol), formatRound(roundCol, digits = roundDigit))
}
#######################################################################
jscode <- "
shinyjs.collapse = function(boxid) {
$('#' + boxid).closest('.box').find('[data-widget=collapse]').click();
}
"
# App Data
#################################
# App Initialization
#################################
# Modules
# Widgets
sourceDirectory('src/components/widgets', modifiedOnly = F)
# Pages
sourceDirectory('src/pages/', modifiedOnly = F, recursive = T)
# Page Router
source('src/components/layout/AppPages.R')
# App Layout
sourceDirectory('src/components/layout', modifiedOnly = F)
# Scripts
# test line
### Source the file to load the
# Import Libraries
#################################
library(R.utils)
library(plyr)
library(shiny)
library(shinyjs)
library(shinyWidgets)
library(shinydashboard)
library(shinydashboardPlus)
library(dashboardthemes)
library(shinyjqui)
library(DBI)
library(glue)
library(DT)
library(stringr)
library(readr)
library(tidyverse)
library(jsonlite)
library(dplyr)
library(tidyr)
#######################################################################
provided <- function(data, condition, call) {
if (rlang::eval_tidy(enquo(condition), data)) {
rlang::eval_tidy(rlang::quo_squash(quo(data %>% !!enquo(call))))
} else data
}
formatDTDisplay <- function(a, selectChoice = 'multiple', currencyCol = NULL, roundCol = NULL, roundDigit = 2, pagelen = 50, rownames = F) {
a %>% datatable(#extensions = 'Buttons',
selection = selectChoice, rownames = rownames, filter = 'top', escape = F,
options = list( pageLength = pagelen, scrollX = T, scrollY = "500px", dom = 'T<"clear">lBfrtip')
) %>%
provided(!is.null(currencyCol), formatCurrency(currencyCol, currency = "", interval = 3, mark = ",")) %>%
provided(!is.null(roundCol), formatRound(roundCol, digits = roundDigit))
}
#######################################################################
jscode <- "
shinyjs.collapse = function(boxid) {
$('#' + boxid).closest('.box').find('[data-widget=collapse]').click();
}
"
# App Data
#################################
# App Initialization
#################################
# Modules
# Widgets
sourceDirectory('src/components/widgets', modifiedOnly = F)
# Pages
sourceDirectory('src/pages/', modifiedOnly = F, recursive = T)
# Page Router
source('src/components/layout/AppPages.R')
# App Layout
sourceDirectory('src/components/layout', modifiedOnly = F)
# Scripts
# test line
# Widgets
sourceDirectory('src/components/widgets', modifiedOnly = F)
# Pages
sourceDirectory('src/pages/', modifiedOnly = F, recursive = T)
# Page Router
source('src/components/layout/AppPages.R')
# App Layout
sourceDirectory('src/components/layout', modifiedOnly = F)
?source
AppPageList <- str_extract(list.files(paste0('src/pages/'), recursive = T), '[^.]+')
AppPagesUI <- function(id) {
ns <- NS(id)
PageUIList <- lapply(AppPageList, function(x) {
x <- str_extract(x, '([^/]+$)')
tabItem(tabName = str_to_lower(x), get(paste0(x, 'ModuleUI'))(ns(paste0(x, 'PageModule'))))
})
do.call(tabItems, compact(PageUIList))
}
AppPages <- function(input, output, session, ...) {
ns <- session$ns
lapply(AppPageList, function(x) {
x <- str_extract(x, '([^/]+$)')
PageConfig <- get(paste0(x, 'PageConfig'))
callModule(get(paste0(x, 'Module')), paste0(x, 'PageModule'), ...)
})
# Hackish Way to Select Tab
shinyjs::runjs('setTimeout(function() {$("#LeftSideBarContent-menu>ul>li:nth-child(1)>a").trigger("click");}, 100);')
}
getwd()
# Page Router
source('src/components/layout/AppPages.R')
# Pages
sourceDirectory('src/pages/', modifiedOnly = F, recursive = T)
# Page Router
source('src/components/layout/AppPages.R')
# App Layout
sourceDirectory('src/components/layout', modifiedOnly = F)
# App Layout
sourceDirectory('src/components/layout/', modifiedOnly = F)
AppHeaderUI <- shinydashboardPlus::dashboardHeader(
# Branding
title = tagList(
tags$a(href = '#top', class = "logo-lg main-logo", img(src = 'img/logo/logo.png')),
tags$a(href = '#top', class = "main-logo", img(src = 'img/logo/favicon.png'))
),
# Logout
tags$li(class = "dropdown"),
# Right Sidebar
enable_rightsidebar = F,
rightSidebarIcon = "bars"
)
?shinydashboardPlus::dashboardHeader
# App Layout
sourceDirectory('src/components/layout/', modifiedOnly = F)
widgetUI <- tags$li(class = "dropdown")
AppHeaderUI <- shinydashboardPlus::dashboardHeader(
# Logout
widgetUI,
# Branding
title = tagList(
tags$a(href = '#top', class = "logo-lg main-logo", img(src = 'img/logo/logo.png')),
tags$a(href = '#top', class = "main-logo", img(src = 'img/logo/favicon.png'))
),
# Right Sidebar
enable_rightsidebar = F,
rightSidebarIcon = "bars"
)
dashboardHeader()
tags$li(class = "dropdown")
tagList(
tags$a(href = '#top', class = "logo-lg main-logo", img(src = 'img/logo/logo.png')),
tags$a(href = '#top', class = "main-logo", img(src = 'img/logo/favicon.png'))
)
AppHeaderUI <- shinydashboardPlus::dashboardHeader(
# Branding
title = tagList(
tags$a(href = '#top', class = "logo-lg main-logo", img(src = 'img/logo/logo.png')),
tags$a(href = '#top', class = "main-logo", img(src = 'img/logo/favicon.png'))
),
# Logout
widgetUI,
# Right Sidebar
enable_rightsidebar = F,
controlbarIcon = "bars"
)
AppHeaderUI <- shinydashboardPlus::dashboardHeader(
# Branding
title = tagList(
tags$a(href = '#top', class = "logo-lg main-logo", img(src = 'img/logo/logo.png')),
tags$a(href = '#top', class = "main-logo", img(src = 'img/logo/favicon.png'))
),
# Logout
widgetUI,
# Right Sidebar
# enable_rightsidebar = F,
controlbarIcon = "bars"
)
# App Layout
sourceDirectory('src/components/layout/', modifiedOnly = F)
runApp()
runApp()
runApp()
icon('dashboard')
icon('dashboard', verify_fa = F)
runApp()
runApp('C:/Users/259699/Desktop/microplastics/shiny_dashboard_app')
runApp()
?callModule
runApp()
View(AppLeftSideBarUI)
runApp()
